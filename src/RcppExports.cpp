// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// charToInt
List charToInt(CharacterVector Seq);
RcppExport SEXP microclass_charToInt(SEXP SeqSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< CharacterVector >::type Seq(SeqSEXP);
    __result = Rcpp::wrap(charToInt(Seq));
    return __result;
END_RCPP
}
// crossprodnum
NumericMatrix crossprodnum(SEXP AA);
RcppExport SEXP microclass_crossprodnum(SEXP AASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    __result = Rcpp::wrap(crossprodnum(AA));
    return __result;
END_RCPP
}
// tcrossprodnum
NumericMatrix tcrossprodnum(SEXP AA);
RcppExport SEXP microclass_tcrossprodnum(SEXP AASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    __result = Rcpp::wrap(tcrossprodnum(AA));
    return __result;
END_RCPP
}
// crossprodint
NumericMatrix crossprodint(SEXP AA);
RcppExport SEXP microclass_crossprodint(SEXP AASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    __result = Rcpp::wrap(crossprodint(AA));
    return __result;
END_RCPP
}
// tcrossprodint
NumericMatrix tcrossprodint(SEXP AA);
RcppExport SEXP microclass_tcrossprodint(SEXP AASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    __result = Rcpp::wrap(tcrossprodint(AA));
    return __result;
END_RCPP
}
// tcrossprodnumnum
NumericMatrix tcrossprodnumnum(SEXP AA, SEXP BB);
RcppExport SEXP microclass_tcrossprodnumnum(SEXP AASEXP, SEXP BBSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    Rcpp::traits::input_parameter< SEXP >::type BB(BBSEXP);
    __result = Rcpp::wrap(tcrossprodnumnum(AA, BB));
    return __result;
END_RCPP
}
// tcrossprodintint
NumericMatrix tcrossprodintint(SEXP AA, SEXP BB);
RcppExport SEXP microclass_tcrossprodintint(SEXP AASEXP, SEXP BBSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    Rcpp::traits::input_parameter< SEXP >::type BB(BBSEXP);
    __result = Rcpp::wrap(tcrossprodintint(AA, BB));
    return __result;
END_RCPP
}
// crossprodnumnum
NumericMatrix crossprodnumnum(SEXP AA, SEXP BB);
RcppExport SEXP microclass_crossprodnumnum(SEXP AASEXP, SEXP BBSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    Rcpp::traits::input_parameter< SEXP >::type BB(BBSEXP);
    __result = Rcpp::wrap(crossprodnumnum(AA, BB));
    return __result;
END_RCPP
}
// crossprodintint
NumericMatrix crossprodintint(SEXP AA, SEXP BB);
RcppExport SEXP microclass_crossprodintint(SEXP AASEXP, SEXP BBSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    Rcpp::traits::input_parameter< SEXP >::type BB(BBSEXP);
    __result = Rcpp::wrap(crossprodintint(AA, BB));
    return __result;
END_RCPP
}
// crossprodIntint
NumericMatrix crossprodIntint(SEXP AA, SEXP BB);
RcppExport SEXP microclass_crossprodIntint(SEXP AASEXP, SEXP BBSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    Rcpp::traits::input_parameter< SEXP >::type BB(BBSEXP);
    __result = Rcpp::wrap(crossprodIntint(AA, BB));
    return __result;
END_RCPP
}
// prodnumnum
NumericMatrix prodnumnum(SEXP AA, SEXP BB);
RcppExport SEXP microclass_prodnumnum(SEXP AASEXP, SEXP BBSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    Rcpp::traits::input_parameter< SEXP >::type BB(BBSEXP);
    __result = Rcpp::wrap(prodnumnum(AA, BB));
    return __result;
END_RCPP
}
// prodintint
NumericMatrix prodintint(SEXP AA, SEXP BB);
RcppExport SEXP microclass_prodintint(SEXP AASEXP, SEXP BBSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    Rcpp::traits::input_parameter< SEXP >::type BB(BBSEXP);
    __result = Rcpp::wrap(prodintint(AA, BB));
    return __result;
END_RCPP
}
// eprodnumnum
NumericMatrix eprodnumnum(SEXP AA, SEXP BB);
RcppExport SEXP microclass_eprodnumnum(SEXP AASEXP, SEXP BBSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    Rcpp::traits::input_parameter< SEXP >::type BB(BBSEXP);
    __result = Rcpp::wrap(eprodnumnum(AA, BB));
    return __result;
END_RCPP
}
// eprodintint
NumericMatrix eprodintint(SEXP AA, SEXP BB);
RcppExport SEXP microclass_eprodintint(SEXP AASEXP, SEXP BBSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    Rcpp::traits::input_parameter< SEXP >::type BB(BBSEXP);
    __result = Rcpp::wrap(eprodintint(AA, BB));
    return __result;
END_RCPP
}
// sseintint
IntegerVector sseintint(SEXP AA, SEXP BB);
RcppExport SEXP microclass_sseintint(SEXP AASEXP, SEXP BBSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    Rcpp::traits::input_parameter< SEXP >::type BB(BBSEXP);
    __result = Rcpp::wrap(sseintint(AA, BB));
    return __result;
END_RCPP
}
// ssenumnum
NumericVector ssenumnum(SEXP AA, SEXP BB);
RcppExport SEXP microclass_ssenumnum(SEXP AASEXP, SEXP BBSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    Rcpp::traits::input_parameter< SEXP >::type BB(BBSEXP);
    __result = Rcpp::wrap(ssenumnum(AA, BB));
    return __result;
END_RCPP
}
// Kmer_count
IntegerMatrix Kmer_count(SEXP seqs, int K, bool names);
RcppExport SEXP microclass_Kmer_count(SEXP seqsSEXP, SEXP KSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type seqs(seqsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< bool >::type names(namesSEXP);
    __result = Rcpp::wrap(Kmer_count(seqs, K, names));
    return __result;
END_RCPP
}
// multinomClassifyCpp
List multinomClassifyCpp(List seqs, int K, NumericMatrix QMat, NumericVector Prior, bool posterior);
RcppExport SEXP microclass_multinomClassifyCpp(SEXP seqsSEXP, SEXP KSEXP, SEXP QMatSEXP, SEXP PriorSEXP, SEXP posteriorSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type seqs(seqsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type QMat(QMatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Prior(PriorSEXP);
    Rcpp::traits::input_parameter< bool >::type posterior(posteriorSEXP);
    __result = Rcpp::wrap(multinomClassifyCpp(seqs, K, QMat, Prior, posterior));
    return __result;
END_RCPP
}
// multinomTrainCpp
SEXP multinomTrainCpp(List seqs, int K, bool names, List classesIn, double nPseudo);
RcppExport SEXP microclass_multinomTrainCpp(SEXP seqsSEXP, SEXP KSEXP, SEXP namesSEXP, SEXP classesInSEXP, SEXP nPseudoSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type seqs(seqsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< bool >::type names(namesSEXP);
    Rcpp::traits::input_parameter< List >::type classesIn(classesInSEXP);
    Rcpp::traits::input_parameter< double >::type nPseudo(nPseudoSEXP);
    __result = Rcpp::wrap(multinomTrainCpp(seqs, K, names, classesIn, nPseudo));
    return __result;
END_RCPP
}
// rdpClassifyCpp
List rdpClassifyCpp(List seqs, int K, NumericMatrix QMat, NumericVector Prior, bool posterior);
RcppExport SEXP microclass_rdpClassifyCpp(SEXP seqsSEXP, SEXP KSEXP, SEXP QMatSEXP, SEXP PriorSEXP, SEXP posteriorSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type seqs(seqsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type QMat(QMatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Prior(PriorSEXP);
    Rcpp::traits::input_parameter< bool >::type posterior(posteriorSEXP);
    __result = Rcpp::wrap(rdpClassifyCpp(seqs, K, QMat, Prior, posterior));
    return __result;
END_RCPP
}
// rdpTrainCpp
SEXP rdpTrainCpp(List seqs, int K, bool names, List classesIn, double nPseudo);
RcppExport SEXP microclass_rdpTrainCpp(SEXP seqsSEXP, SEXP KSEXP, SEXP namesSEXP, SEXP classesInSEXP, SEXP nPseudoSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type seqs(seqsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< bool >::type names(namesSEXP);
    Rcpp::traits::input_parameter< List >::type classesIn(classesInSEXP);
    Rcpp::traits::input_parameter< double >::type nPseudo(nPseudoSEXP);
    __result = Rcpp::wrap(rdpTrainCpp(seqs, K, names, classesIn, nPseudo));
    return __result;
END_RCPP
}
